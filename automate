Bot_Jeu1(beg){

 * (beg): 
 | not(Got(T)) ? Explode :(Mort)
 | Cell(d,A,1) ? Turn(d) ; Hit(d,A,1) :(beg)
 | Closest(d,@) ? Turn(d) ; Move :(beg)
 
 * (Mort):
 | True ? :(Mort)
 
 * (Hit):
 | True ? :(beg)
 
}

Bot_Jeu2(beg){

 * (beg): 
 | not(Got(T)) ? Explode :(Mort)
 | Cell(d,A,1) ? Turn(d) ; Hit(d,A,1) :(beg)
 | Closest(d,A) ? Turn(d) ; Move :(beg)
 
 * (Mort):
 | True ? :(Mort)
 
 * (Hit):
 | True ? :(beg)
}

Base_Jeu1(beg){

 * (beg):
 | not(Got(T)) ? Explode :(Mort)
 | True ? 0,01 % Egg(3) / Wait(0) :(beg)
 
 * (Mort):
 | True ? :(Mort)
 
 * (Hit):
 | True ? :(beg)

}

Base_Jeu2(beg){

 * (beg):
 | Cell(H,P,5) ? Pick((DIRECTION ?)P,5) :(beg)

}

BDF(beg){
 
  * (beg):
  | Cell(H,A,1) / Cell(F,A,1) ? Hit(H,A,2) ; Explode :(Mort)
  | Cell(F,V,1) ? Move :(beg)
  
  * (Mort):
  | True ? :(Mort)
  
}

Fleche(beg){
 
  * (beg):
  | Cell(F,V,1) ? 95 % Move(F) / Explode :(beg)
  | not(Got(T)) ? :(Mort)
  | Cell(F,A,1) ? Hit(F,A,1) ; Explode :(Mort)
  
  * (Mort):
  | True ? :(Mort)
  
}

Item(beg){	// pas fini (quelle comportement si inventaire
		// du joueur plein

 * (beg):
 | 

}

Joueur_1(beg){

 * (beg): 
 | not(Got(T)) ? Explode :(Mort)
 | Key(z) & Key(q) ? Turn(NW) ; Move(NW) :(beg)
 | Key(z) & Key(d) ? Turn(NE) ; Move(NE) :(beg)
 | Key(s) & Key(q) ? Turn(SW) ; Move(SW) :(beg)
 | Key(s) & Key(d) ? Turn(SE) ; Move(SE) :(beg)
 | Key(z) ? Turn(N) ; Move(F) :(beg)
 | Key(q) ? Turn(W) ; Move(F) :(beg)
 | Key(d) ? Turn(E) ; Move(F) :(beg)
 | Key(s) ? Turn(S) ; Move(F) :(beg)
 | Key(SPACE) ? :(fight)
 | Key(a) ? :(select1)
 | Cell(H,P,1) ? Pick(P,1) :(beg)
 | not(Cell(H,A,20)) ? :(regen)
 | True ? Wait :(beg)
 
 * (regen):
 | not(Cell(H,A,20)) ? Power :(regen)
 | Cell(H,A,20) ? :(beg)
 
 * (fight):
 | Cell(d,A,2) ? Turn(d) ; Hit(d,2) :(beg)
 | not(Cell(d,A,2)) ? Egg(1) :(beg)
 
 * (select1):
 | Key(a) ? :(beg)
 | Key(d) ? Wait(1) :(select1)
 | Key(q) ? Wait(-1) :(select1)
 | Key(e) ? Wait(0) :(select2)
 
 * (select2):
 | Key(l) ? :(beg)
 | Key(FR) ? Wait(1) :(select2)
 | Key(FL) ? Wait(-1) :(select2)
 | Key(ENTER) ? Get :(beg)
 | Key(p) ? Throw :(beg)
  
 * (Mort):
 | True ? :(Mort)
 
}

Joueur_2(beg){

 * (beg): 
 | not(Got(T)) ? Explode :(Mort)
 | Key(FU) & Key(FL) ? Turn(NW) ; Move(NW) :(beg)
 | Key(FU) & Key(FR) ? Turn(NE) ; Move(NE) :(beg)
 | Key(FD) & Key(FL) ? Turn(SW) ; Move(SW) :(beg)
 | Key(FD) & Key(FR) ? Turn(SE) ; Move(SE) :(beg)
 | Key(F) ? Turn(F) ; Move(F) :(beg)
 | Key(m) ? :(fight)
 | Key(l) ? :(select1)
 | Cell(H,P,1) ? Pick(P,1) :(beg)
 | not(Cell(H,A,20)) ? :(regen)
 | True ? Wait :(beg)
 
 * (regen):
 | not(Cell(H,A,20)) ? Power :(regen)
 | Cell(H,A,20) ? :(beg)
 
 * (fight):
 | Cell(d,A,2) ? Turn(d) ; Hit(d,2) :(beg)
 | not(Cell(d,A,2)) ? Egg(1) :(beg)
 
 * (select1):
 | Key(l) ? :(beg)
 | Key(FR) ? Wait(1) :(select1)
 | Key(FL) ? Wait(-1) :(select1)
 | Key(ENTER) ? Wait(0) :(select2)
 
 * (select2):
 | Key(l) ? :(beg)
 | Key(FR) ? Wait(1) :(select2)
 | Key(FL) ? Wait(-1) :(select2)
 | Key(ENTER) ? Get :(beg)
 | Key(p) ? Throw :(beg)
  
 * (Mort):
 | True ? :(Mort)
 
}

Dragon(beg){

 * (beg): 
 | not(Got(T)) ? Explode :(Mort)
 | Cell(d,A,10) ? Turn(d) :(fight)
 | True ? 25 % Turn(W) ; Move / 25 % Turn(E) ; Move / 25 % Turn(E) ; Move / 25 % Turn(S) ; Move :(beg)
 
 * (fight):
 | Cell(F,A,2) ? Hit(F,A,2) :(beg)
 | not(Cell(F,A,2))? Egg(2) :(beg)

 * (Mort):
 | True ? :(Mort)

}

Archer(beg){

 * (beg): 
 | not(Got(T)) ? Explode :(Mort)
 | Cell(d,A,10) ? Turn(d) ; Egg(1) :(beg)
 | True ? 25 % Turn(W) ; Move / 25 % Turn(E) ; Move / 25 % Turn(E) ; Move / 25 % Turn(S) ; Move :(beg)

 * (Mort):
 | True ? :(Mort)

}

Dasher(beg){

 * (beg): 
 | not(Got(T)) ? Explode :(Mort)
 | Cell(d,A,10) ? Turn(d) ; Wizz(10) :(beg)
 | True ? 25 % Turn(W) ; Move / 25 % Turn(E) ; Move / 25 % Turn(E) ; Move / 25 % Turn(S) ; Move :(beg)																										

 * (Mort):
 | True ? :(Mort)

}


  
